
    QUESTION :-

1588. Sum of All Odd Length Subarrays
Easy

Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.
A subarray is a contiguous subsequence of the array.

 Example 1:
Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58
 
 Example 2:
Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.

 Example 3:
Input: arr = [10,11,12]
Output: 66
 
 Constraints:
1 <= arr.length <= 100
1 <= arr[i] <= 1000
 
 Follow up:
Could you solve this problem in O(n) time complexity?




    ANSWER :-

class Solution {
public:
    
//     // APPROACH : using my own approach :-
    
//     int sumOddLengthSubarrays(vector<int>& arr) {
        
//         int res=0;
//         int n=arr.size();
//         int sn=1;
        
//         while(sn<n+1)  {
//             int i=0;int j=sn;
//             int s=0;
//             int k=0;
//             while(k<j)  {
//                 s+=arr[k];
//                 k++;
//             }
//             cout<<s<<" ";
//             res+=s;
//             // s=0;
//             while(i<n&&j<n) {
//                 s+=arr[j];
//                 j++;
//                 s-=arr[i];
//                 i++;
//                 cout<<s<<" ";
//                 res+=s;
//             }
//             sn += 2;
//         }
        
//         return res;
//     }
    
    // APPRAOCH : some mathematical approach
    
    int sumOddLengthSubarrays(vector<int>& arr) {
        int ans = 0,n=arr.size(),i;
        for(i =0;i<n;i++)
		{
            int contribution = ceil((i+1)*(n-i)/2.0);
            ans+=(contribution*arr[i]);
        }
        return ans;
    }
};