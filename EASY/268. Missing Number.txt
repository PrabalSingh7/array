
    QUESTION :-

268. Missing Number
Easy

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
 
 Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
 
 Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.
 
 Constraints:
n == nums.length
1 <= n <= 104
0 <= nums[i] <= n
All the numbers of nums are unique.
 
 Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?

Accepted:1,216,358
Submissions:1,987,637


    ANSWER :-

class Solution {
public:
    
//     // APPROACH 1 : sort the array and return the index ie not equal to number on it.
    
//     int missingNumber(vector<int>& nums) {
        
//         sort(nums.begin(),nums.end());
        
//         for(int i=0 ; i< nums.size() ; i++ )    {
            
//             if(nums[i] != i)
//                 return i;
            
//         }
        
//         return nums.size();
        
//     }
    
 
//     // APPROACH 2 : using an extra array to mark all elemnets present.
    
//     int missingNumber(vector<int>& nums) {
        
//         int n = nums.size();
//         vector<int> check(n,0);
        
//         for(int i=0 ; i< nums.size() ; i++ )    {
            
//             check[nums[i]] ++;
            
//         }
        
//         for(int i=0 ; i <= n ; i++) {
            
//             if(check[i]>0)
//                 return i;
            
//         }
        
//         return -1;
        
//     }

//  APPRAOCH 3 : mathematical approach (my own)
    
    int missingNumber(vector<int>& nums)    {
        
        int actualSum = 0;
        int givenSum = 0;
        int n = nums.size();
        
        for( int i=0 ; i<n ; i++ )    {
            
            actualSum += i;
            givenSum += nums[i];
            
        }
        
        actualSum += n;
        return actualSum - givenSum;
        
    }
    
};