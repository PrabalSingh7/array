
    QUESTION :->

1. Two Sum
Easy

Share
Given an array of integers nums and an integer target, return indices of the two numbers such that they add 
up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

 Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
 Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]
 Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]
 
 Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 
Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

Accepted:7,666,685
Submissions:15,632,202


    ANSWER :->

class Solution {
public:
    //brute force approach :- using two for loops and checking sum at every iteration 
    // vector<int> twoSum(vector<int>& nums, int target) {
    //     vector<int> ans;
    //     for (int i=0;i<nums.size()-1;i++) {
    //             for(int j=i+1;j<nums.size();j++) {  
    //                 if(nums[i] + nums[j] == target) {
    //                     ans.push_back(i);
    //                     ans.push_back(j);
    //                     return ans;
    //                 }
    //             }
    //     }
    //     return ans;
    // }
    
    //optimized hashmap approach :- making an unordered map and storing the number and index of number if target - number is not already present in the map.

vector<int> twoSum(vector<int> &numbers, int target)
{
    //Key is the number and value is its index in the vector.
	unordered_map<int, int> hash;
	vector<int> result;
	for (int i = 0; i < numbers.size(); i++) {
		int numberToFind = target - numbers[i];

            //if numberToFind is found in map, return them
		if (hash.find(numberToFind) != hash.end()) {

			result.push_back(hash[numberToFind] );
			result.push_back(i );			
			return result;
		}

            //number was not found. Put it in the map.
		hash[numbers[i]] = i;
	}
	return result;
} 
    

    
};