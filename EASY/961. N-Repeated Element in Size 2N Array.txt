961. N-Repeated Element in Size 2N Array
Easy

1012

306

Add to List

Share
You are given an integer array nums with the following properties:

nums.length == 2 * n.
nums contains n + 1 unique elements.
Exactly one element of nums is repeated n times.
Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3
Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2
Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5
 

Constraints:

2 <= n <= 5000
nums.length == 2 * n
0 <= nums[i] <= 104
nums contains n + 1 unique elements and one of them is repeated exactly n times.
Accepted
188,378
Submissions
248,654








class Solution {
public:
    
//     // APPROACH 1 :    t.c - O(n)     s.c - O(n)
    
//     int repeatedNTimes(vector<int>& nums) {
        
//         int n = nums.size();
//         unordered_map<int,int> mp;
        
//         for(int i=0; i<n; i++)  {
//             mp[nums[i]]++;
//             if(mp[nums[i]]>1)
//                 return nums[i];
//         }

//         return 0;
//     }
    
    
    // APPROACH 2 :    t.c - O(nlogn)     s.c - O(1)
    
    int repeatedNTimes(vector<int>& nums) {
        
        int n = nums.size();
        int res;
        
        sort(nums.begin(),nums.end());
        
        for(int i=0; i<n-1; i++)  {
            if(nums[i]==nums[i+1])
                return nums[i];
        }

        return 0;
    }
};