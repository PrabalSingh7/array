2032. Two Out of Three
Easy

412

32

Add to List

Share
Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.
 

Example 1:

Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.
Example 2:

Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.
Example 3:

Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 

Constraints:

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100
Accepted
35,680
Submissions
49,115





class Solution {
public:
    
    // APPROACH :- (my own approach) - using unordered_set, we store all values of all 3 arrays, and then traverse through all 3 finding the values ie present in atleast one of the other two.
    
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
        
        int n1 = nums1.size();
        int n2 = nums2.size();
        int n3 = nums3.size();
        
        unordered_set<int> s1;
        for(int i=0; i<n1; i++)   {
            s1.insert(nums1[i]);
        }
        unordered_set<int> s2;
        for(int i=0; i<n2; i++)   {
            s2.insert(nums2[i]);
        }
        unordered_set<int> s3;
        for(int i=0; i<n3; i++)   {
            s3.insert(nums3[i]);
        }
        
        unordered_set<int> res;
        
        for(int i=0; i<n1; i++) {
            if(s2.find(nums1[i])!=s2.end() || s3.find(nums1[i])!=s3.end() )
                res.insert(nums1[i]);
        }
        for(int i=0; i<n2; i++) {
            if(s1.find(nums2[i])!=s1.end() || s3.find(nums2[i])!=s3.end() )
                res.insert(nums2[i]);
        }
        for(int i=0; i<n3; i++) {
            if(s2.find(nums3[i])!=s2.end() || s1.find(nums3[i])!=s1.end() )
                res.insert(nums3[i]);
        }
        
        vector<int> result;
        unordered_set<int> :: iterator itr;
        for (itr = res.begin(); itr != res.end(); itr++)
            result.push_back(*itr);
        
        return result;
    }
};