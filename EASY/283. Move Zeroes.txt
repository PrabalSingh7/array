    QUESTION :-

283. Move Zeroes
Easy

Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Note that you must do this in-place without making a copy of the array.

 Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
 
 Example 2:
Input: nums = [0]
Output: [0]
 
 Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 
Follow up: Could you minimize the total number of operations done?

Accepted:1,872,753
Submissions:3,061,717



    ANSWER :-

class Solution {
public:

//     // APPROACH 1 :- delete all the zeros in vector using erase stl functon.
    
//     void moveZeroes(vector<int>& nums) {
        
//         int count=0;
        
//         for(int i=0 ; i<nums.size() ; i++)  {
            
//             if(nums[i]==0)  {
//                 count++;
//                 nums.erase(nums.begin()+i);
//                 i--;
//             }            
//         }
        
//         for(int i=0; i<count; i++ ) {
//             nums.push_back(0);
//         }
        
//     }
    
    // APPROACH 2 :- find first occurence of 0, and from there swap it with it next non 0 number and do this till end of vector.
    
    void moveZeroes(vector<int>& nums)      {
    
        //finding the first zero occurence
        int k = 0;
        int n = nums.size();
        
        while (k < n) {
            if (nums[k] == 0) 
              break; 
            else 
              k = k + 1;
        }
        
        int i = k, j = k + 1;

        //swapping zeros with their next non-zero number.
        while(i < n && j < n) {
            
            if (nums[j] != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                i++;
            }
            j++;
        
        }
        
    }
    
};