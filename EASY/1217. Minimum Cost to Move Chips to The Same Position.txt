1217. Minimum Cost to Move Chips to The Same Position
Easy

1743

226

Add to List

Share
We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:

position[i] + 2 or position[i] - 2 with cost = 0.
position[i] + 1 or position[i] - 1 with cost = 1.
Return the minimum cost needed to move all the chips to the same position.

 

Example 1:


Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.
Example 2:


Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.
Example 3:

Input: position = [1,1000000000]
Output: 1
 

Constraints:

1 <= position.length <= 100
1 <= position[i] <= 10^9
Accepted
103,120
Submissions
142,621




class Solution {
public:
    
    // APPROACH : ITS IS A VERY GOOD QUESTION BASED ON OBSERVATIONAL SKILLS, we just have to find out the number of even and odd positions, and the result will be the minimum of both.              t.c - O(n)    s.c - O(1)
        
    
    int minCostToMoveChips(vector<int>& position) {
        
        int even = 0;
        int odd = 0;
        
        for(int i=0; i<position.size(); i++)    {
            if(position[i]%2==0)
                even++;
            else
                odd++;
        }
        
        return min(even,odd);
    }
};