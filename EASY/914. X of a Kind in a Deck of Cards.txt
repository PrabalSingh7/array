914. X of a Kind in a Deck of Cards
Easy

1436

351

Add to List

Share
You are given an integer array deck where deck[i] represents the number written on the ith card.

Partition the cards into one or more groups such that:

Each group has exactly x cards where x > 1, and
All the cards in one group have the same integer written on them.
Return true if such partition is possible, or false otherwise.

 

Example 1:

Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].
Example 2:

Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.
 

Constraints:

1 <= deck.length <= 104
0 <= deck[i] < 104
Accepted
95,763
Submissions
297,158




class Solution {
public:
    bool hasGroupsSizeX(vector<int>& deck) {
        
        //  returning false for n == 1
        int n = deck.size();
        if(n==1)
            return false;
        
        //  counting occurnce of all elements 
        unordered_map<int,int> mp;        
        for(auto it : deck)
            mp[it]++;
        
        vector<int> groups;
        for(auto it : mp) {
            if(it.second==1)    // returning false if any singular element present
                return false;
            groups.push_back(it.second);    //creating array of all frequencies 
        }
        
        int g = groups.size();      
        if(g==1)        // returning true if only elemnt is present multiple times.
            return true;
        
        
                        //  FINDING GCD
        
        int lim = INT_MAX;
        for(int i=0; i<g; i++)  //getting the smallest number for GCD calculation
            lim = min(lim,groups[i]);
        if(lim==1)  // double checking the case for singular element
            return false;
        
        // Calculating GCD using nested loops
        for(int i=lim; i>=1; i--) {
            for(int j=0; j<g; j++)  {
                if(i==2 )   {
                    if(groups[j]%i != 0)
                        return false;       // returning false if GCD < 2. 
                }
                if(groups[j]%i != 0)
                    break;
                if(j==g-1 && groups[j]%i == 0)      // returning true if GCD found > 2.
                    return true;
            }
        }

        return true;    
    }
};