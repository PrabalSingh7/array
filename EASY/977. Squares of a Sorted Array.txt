
    QUESTION :-

977. Squares of a Sorted Array
Easy

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
 
 Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
 Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 
Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?

Accepted:1,157,416
Submissions:1,611,197


    ANSWER :-

class Solution {
public:
    // APPRAOCH : using two pointer approach
    
    vector<int> sortedSquares(vector<int>& A) {
        
        //making resultant vector of required size
        vector<int> res(A.size());
        
        //keeping two poiters left & right
        int left = 0, right = A.size() - 1;
        
        // for loop with implementation
        for (int k = A.size() - 1; k >= 0; k--) {
            
            if (abs(A[right]) > abs(A[left])) 
                res[k] = A[right] * A[right--];
            else 
                res[k] = A[left] * A[left++];
        
        }
        
        return res;
    }
};