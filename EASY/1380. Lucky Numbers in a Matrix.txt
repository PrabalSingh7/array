1380. Lucky Numbers in a Matrix
Easy

1173

69

Add to List

Share
Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 105.
All elements in the matrix are distinct.
Accepted
72,286
Submissions
102,495






class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        
        int R = matrix.size();
        int C = matrix[0].size();
        
        vector<int> minRow(R,INT_MAX);
        vector<int> maxCol(C,INT_MIN);
        
        //preparing min Row vector
        for(int i=0; i<R; i++)  {
            for(int j=0; j<C; j++)  {
                minRow[i] = min(minRow[i],matrix[i][j]);
            }
        }
        
        //preparing max Column vector
        for(int i=0; i<C; i++)  {
            for(int j=0; j<R; j++)  {
                maxCol[i] = max(maxCol[i],matrix[j][i]);
            }
        }
        
        vector<int> result;
        
        for(int i=0; i<R; i++)  {
            for(int j=0; j<C; j++)  {
                // cout<<minRow[i]<<" "<<maxCol[j]<<" "<<matrix[i][j]<<"\n";
                if(matrix[i][j] <= minRow[i] && matrix[i][j] >= maxCol[j])
                    result.push_back(matrix[i][j]);
            }
        }
        
        return result;
    }
};