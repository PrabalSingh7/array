    
    QUESTION :-

74. Search a 2D Matrix
Medium

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
 Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
 
 Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
 Constraints:
m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

Accepted:966,044
Submissions:2,084,127



    ANSWER :-

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int R = matrix.size()-1;
        int C = matrix[0].size()-1;
        
        int r = 0 ;
        int c = 0 ;

        while(r<=R) {
            
            if( target >= matrix[r][0] && target <= matrix[r][C]   )    {
                
                for(int i=0 ; i<=C ; i++)   {
                    if(matrix[r][i] == target)
                        return true;
                }
                return false;
                
            }
            
            r++;
        
        }
        
        return false;
        
    }
};