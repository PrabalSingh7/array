2364. Count Number of Bad Pairs
Medium
631
17
Companies
You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].

Return the total number of bad pairs in nums.

 

Example 1:

Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.
Example 2:

Input: nums = [1,2,3,4,5]
Output: 0
Explanation: There are no bad pairs.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
Accepted
20.9K
Submissions
50.9K
Acceptance Rate
41.1%
Seen this question in a real interview before?
1/4





C++ || Unordered-map || Explained || Commented Code
_prabal_singh_
100 Days Badge 2022
3
a minute ago
Intuition
Brute force approach will result in TLE.

Approach
Rather than counting bad pairs we will count bad pairs.
Good pair => nums[j]-j == nums[i]-i
Maintaining a hashmap to count the number of good pairs possible.

Complexity
Time complexity : O(n)
Space complexity : O(n)
Code
class Solution {
public: 
    //using helping function to evalute sum of first n-1 natural numbers as ie the number of possible pairs for a given 'n'.
    long long fun(int n)   {
        if(n==0)    {return 0;}
        long long val = 0;
        for(int i=1; i<=n; i++) {
            val += i;
        }
        return val;
    }

    long long countBadPairs(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int,int> mp;

        //modifiying the array as arr[i]-i (to evalute if its a good pair)
        for(int i=0; i<n; i++)  {
            nums[i] = nums[i] - i;
            mp[nums[i]]++;
        }
        long long m = 0;
        for(auto i : mp)    {
            //evaluating the number of good pairs for every unique arri]-i value >= 2.
            if(i.second>1)  {   
                m+= fun(i.second-1);
            }
        }
            
        //returning the total possible number of pairs - good pairs.     
        return fun(n-1) - m;
    }
};