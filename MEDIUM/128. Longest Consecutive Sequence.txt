128. Longest Consecutive Sequence
Medium
14.2K
583
Companies
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109




class Solution
{
public:
	unordered_map<int, int> parent;
	int find(int x)
	{
		if(parent.count(x)==0){return x;} //for supose thier is number 0 in array and parent of 0 is -1 and -1 is not in map so this condition work for that
		if (parent[x] == x)
		{
			return x;
		}
		return parent[x] = find(parent[x]);
	}
	int longestConsecutive(vector<int> nums)
	{
		for (int i = 0; i < nums.size(); i++)
		{
			parent[nums[i]] = nums[i] - 1;  //make parent nums[i] to nums[i] - 1 it will help in consecutiveness
		}

		for (int i = 0; i < nums.size(); i++){
			find(nums[i]);
		}
		int ans = 0;
		unordered_map<int, int> count;
		for (auto i:parent){
			count[i.second]++;
			// cout<<i.second<<" ";
			ans = max(ans, count[i.second]);
		}

		return ans;
	}
};