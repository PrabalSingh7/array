1814. Count Nice Pairs in an Array
Medium
662
27
Companies
You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

0 <= i < j < nums.length
nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.
Example 2:

Input: nums = [13,10,35,24,76]
Output: 4
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
Accepted
22.5K
Submissions
53.6K
Acceptance Rate
42.0%






C++ || Math || Unordered Map || Explained || Commented Code
_prabal_singh_
100 Days Badge 2022
3
4 minutes ago
Intuition
Math based question

Approach
Instead of val[i]+rev[j] == val[j]+rev[i], we will opt for
val[i]-rev[i] == val[j]-rev[j]
Use hashmap & natural number to count the possible pair number.

Complexity
Time complexity : O(N*k)
Space complexity : O(n)
Code
class Solution {
public:
    //predefinig mod value
    int mod = pow(10,9) + 7;

    //returnig the sum of first 'n' natural numbers ie the total number of pairs possible with that value of 'n'.
    long long fun(long long num)    {
        if(num==0)  return 0;
        return (num*(num+1))/2;
    }

    //evaluating the reverse value of every nums[i]
    int reverse(int num)    {
        vector<int> vec;
        while(num>0)    {
            vec.push_back(num%10);
            num /= 10;
        }
        
        int val = 0;
        for(int i=0; i<vec.size(); i++) {
            val *= 10;
            val += vec[i];
        }
        return val;
    }

    int countNicePairs(vector<int>& nums) {

        vector<int> revs;
        for(int i=0; i<nums.size(); i++)  {
            int val = reverse(nums[i]);
            revs.push_back(val);
        }

        //updating array for evaluation
        for(int i=0; i<nums.size(); i++)    {
            nums[i] = nums[i]-revs[i];
        }

        unordered_map<int,int> mp;
        for(auto i : nums)    {
            mp[i]++;
        }

        long long m = 0;
        for(auto it : mp)   {
            cout<<it.first<<" = "<<it.second<<"\n";
            if(it.second>1) {
                m += fun(it.second-1);
                m %= mod;
            }
        }

        return  m;
    }
};