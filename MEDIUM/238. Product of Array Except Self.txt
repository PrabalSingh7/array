238. Product of Array Except Self
Medium
17.1K
947
Companies
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)




class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre, suc;

        for(int i=0, p=1; i<n; i++) {
            p*= nums[i];
            pre.push_back(p);
        }
        for(int i=n-1,s=1; i>=0; i--) {
            s*= nums[i];
            suc.push_back(s);
        }
        reverse(suc.begin(),suc.end());


        vector<int> res;
        for(int i=0; i<n; i++)  {
            int p = i-1>=0 ? pre[i-1] : 1;
            int s = i+1<n ? suc[i+1] : 1;
            res.push_back(p*s);
        }

        return res;
    }
};